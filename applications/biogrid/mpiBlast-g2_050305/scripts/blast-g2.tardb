#!/usr/bin/perl
#-----------------------------------------------------------#
# Gridified MPI BLASTALL jobs on pragma                     #
#                                                           #
# Requirements;                                             #
#  1. Globus ToolKits >= 2.2                                #
#  2. MPICH-G2 == 1.2.5                                     #
#  3. mpiBlast >= 1.2.1                                     #
#                                                           #
# Language: Perl                                            #
# Author: Hurng-Chun Lee                                    #
# Date: 2004/10/16                                          #
#-----------------------------------------------------------#
use Cwd;
use Getopt::Std;
use Getopt::Long;
use Pod::Usage;

# !! The main program started here !!
# parsing the command line options
parseOpt();
my $dbpath  = $opts{'dbpath'};
my $dbname  = $opts{'dbname'};
my $dbtype  = $opts{'dbtype'};
my $dbfrag  = $opts{'dbfrag'};

execTar($dbpath,$dbname,$dbtype,$dbfrag);

# !! End of main program !!

#---------------------
# Subroutines
#---------------------
sub parseOpt() {
    my $args = $#ARGV;

    $ckopt = GetOptions('dbpath=s' => \$opts{'dbpath'},
                        'dbname=s' => \$opts{'dbname'},
                        'dbfrag=i' => \$opts{'dbfrag'},
                        'dbtype=s' => \$opts{'dbtype'},
                        'untgz'    => \$untgz,
                        'debug'    => \$debug,
                        'man'      => \$man,
                        'help|?'   => \$fmtHelp);

    if ($man) {
        pod2usage(-exitval=>1,-verbose=>2);
    }

    if(! $opts{'dbtype'}) { $opts{'dbtype'} = 'n'; }

    # force -i and -b to be specified
    if( ! $opts{'dbpath'} || ! $opts{'dbname'} || ! $opts{'dbfrag'}) { $ckopt = 0; }

    if( $ckopt != 0) {
        if( ! checkDatabase($opts{'dbpath'},$opts{'dbname'},
                            $opts{'dbfrag'},$opts{'dbtype'}) ) {
                print "\n\nDatabase checking error!\n";
                print "    $err_msg\n";
                $ckopt = 0;
        }
    }

    if (! $ckopt || $fmtHelp || $args < 0) {
        pod2usage(-exitval=>2,-verbose=>0);
    }
}

#-----------------------------------------
# checking databases
#-----------------------------------------
sub checkDatabase {
    my ($dbpath,$dbname,$dbfrag,$dbtype) = @_;

    my $i;
    my $frag_id;
    my $frag_tgz;

    if( ! -d $dbpath) { $err_msg = "DB Path ".$dbpath." does not exist!";  return 0; }

    for($i = 0; $i<$dbfrag; $i++) {

        $frag_id   = sprintf "%02d",$i;

        $frag_tgz  = $dbpath.'/'.$dbname.'.'.$frag_id.'.tgz';

        if( ! -f $frag_tgz) { $err_msg = "DB TGZ ".$frag_tgz." does not exist!";  return 0; }
    }

    return 1;
}

#-----------------------------------------
# Executing tar/untar command 
#-----------------------------------------
sub execTar() {
    my($dbpath,$dbname,$dbtype,$dbfrag) = @_;

    my $frag_id;
    my $frag_name;
    my $tarball;
    my $tar_cmd;

    my $cwd = getcwd();

    for($i=0;$i<$dbfrag;$i++) {

       $frag_id   = sprintf "%02d",$i;
       $frag_name = $dbname.".".$frag_id;
       $tarball   = $frag_name.".tgz";


       chdir($dbpath);

       if($debug) { print "\nTarZiping: ".$tarball."\n"; }

       #$tar_cmd = "/bin/tar -C ".$dbpath." -czf ".$dbpath."/".$tarball." ".$frag_name.".".$dbtype."*";
       if($untgz) {
           $tar_cmd = "/bin/tar -xzf ".$tarball;
       }
       else {
           $tar_cmd = "/bin/tar -czf ".$tarball." ".$frag_name.".".$dbtype."*";
       }

       if($debug) { print "\nTarZiping Command: ".$tar_cmd."\n"; }

       $rslt = `$tar_cmd`;

       chdir($cwd);
    }

}

__END__

=head1 NAME
                                                                                
blast-g2.tardb - Tool for compressing dbfragments 

=head1 DESCRIPTION
                                                                                
=head1 SYNOPSIS
                                                                                
blast-g2.tardb [options]
                                                                                
 Options:
   -help        brief help message
   -man         full documentation
   -debug       enable debug mode 
   -untgz       untarzip files 
   -dbpath      *dbpath* specify the abs. path in which the db fragments are stored. 
   -dbname      *dbname* specify the name of database 
   -dbtype      *dbtype* specify the type of database  (n=Nucleotide, p=Protein)
   -dbfrag      *dbfrag* specify the # of fragments generated by mpiformatdb 
