<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:st1="urn:schemas-microsoft-com:office:smarttags"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 10">
<meta name=Originator content="Microsoft Word 10">
<link rel=File-List href="Lessons_files/filelist.xml">
<title>Lessons Learned</title>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="PlaceType"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="PlaceName"/>
<o:SmartTagType namespaceuri="urn:schemas-microsoft-com:office:smarttags"
 name="place"/>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>cindy</o:Author>
  <o:LastAuthor>cindy</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>403</o:TotalTime>
  <o:Created>2004-09-01T22:36:00Z</o:Created>
  <o:LastSaved>2004-09-01T22:36:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>1317</o:Words>
  <o:Characters>7511</o:Characters>
  <o:Company>SDSC</o:Company>
  <o:Lines>62</o:Lines>
  <o:Paragraphs>17</o:Paragraphs>
  <o:CharactersWithSpaces>8811</o:CharactersWithSpaces>
  <o:Version>10.2625</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if !mso]><object
 classid="clsid:38481807-CA0E-42D2-BF39-B33AF135CC4D" id=ieooui></object>
<style>
st1\:*{behavior:url(#ieooui) }
</style>
<![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:3 135135232 16 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:SimSun;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:SimSun;
	color:black;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'><b style='mso-bidi-font-weight:
normal'><span style='font-size:16.0pt'>Lessons</span></b><b style='mso-bidi-font-weight:
normal'><span style='font-size:18.0pt'> Learned<o:p></o:p></span></b></p>

<p class=MsoNormal align=center style='text-align:center'>===================</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Trust and Access<o:p></o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem: </b>We
encountered 3 problems regarding to trust and access. One is different
requirements on DN format among some sites, one is different security policies
regarding to HTTP services among some sites and another is different security
software (GSISSH) requirement among some sites.<b style='mso-bidi-font-weight:
normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned: </b>In
general, regarding to trust and access between sites in a production grid, need
to have clearly defined requirements which all sites agree and adhere to.<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Resources Readiness<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem:</b> In the
course of our experiment, we encountered a quite few resource requirement related problems, such as inadequate network bandwidth, not enough physical memory and lack of details in software requirement specifications.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned:</b>
Need to determine and set some practical minimum hardware requirements, such as
network bandwidth, physical memory on the frond-end and compute node.
The resource requirements need to be very detailed. Other than OS, shell,
compiler, software need to be installed at certain version and patch level,
also need to specify if certain software or libraries are required on both
front-end and compute nodes, and if <span class=SpellE>Globus</span> need to
be build with certain flavors etc. The requirements need to be updated
quickly and frequently to adapt change.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem: </b>No
matter how much details were given in resource requirements, we always need to
test and correct any problems before knowing the resource is really ready. Also
resources and requirements may change frequently and can get out of synch.<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned: </b>For
production grid, need to design test suites according to resources
requirements, so the resources administrators can easily test their
implementations and the grid administrators can easily evaluate resources
before admit them into production. A production grid needs to keep both
requirements and test suites up-to-date. It needs to run these test suites
frequently to catch and fix any problems in order to keep resources and
requirements in synch. Also, should be incorporated into these test suites are
information extractors that can get all the hardware/software versions and status and make them available to administrators and/or users as appropriate.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation
Considerations:</b> NCSA and KISTI grid status tests and INCA are possible solutions. Perhaps we can setup a standard test suite for PRAGMA sites and each site can add more tests according to their local requirements?<o:p></o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Authentication Setup<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem</b>: It takes
a lot of work and time to contact each site, setup account and test access. Also,
the network/system security setups are different among sites. It would be very
confusing for average users to do these themselves.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned: </b>Need
to automate some of the tasks.<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation
Considerations: </b>Technically, it's possible to setup a common database of
host/user certificates/credentials and access matrix, implement setup processes
for all the resources, so a user's request can easily result in the required
setups on various resources. But with the diversity of administrative domains
within a grid environment, need to consider how to realistically design
request, approval and implementation processes to balance automation and local
administrative control.</p>

<p class=MsoNormal>There are several solutions for setting up a common database
of host/user certificate/credentials.
For example, European group makes and distributes an RPM file which
contains host certificates and signing policy files for all trusted CA.
Making a <span class=SpellE>tarball</span>
should be also acceptable. Using <span class=SpellE>MyProxy</span> as a
credential repository would be a solution for a common database of user
credentials. One several problem is management/update of <span class=SpellE>CRLs</span>.</p>

<p class=MsoNormal>Is BII working on something in this area?<o:p></o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Application Setup<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem: </b>It takes
a lot of work and time to setup and test user environment and user application
setups on each system.<b style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned: </b>Need to provide users configuration files which contains all necessary environmental variable settings for users to run applications on each site in a Grid. Need
automatic replication of user/application environment/setup.<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation
Considerations: </b>Can <span class=SpellE>Gfarm</span> do the job?<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Resources/jobs match making<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem: </b>There
are a lot of differences among resources which may affect users' jobs. For
examples, during our experiment, we encountered a problem with a different
version of Intel Fortran compiler, a problem with <span class=SpellE>Globus</span>
built with different flavors and a problem with certain parallel environment
allocation schemes. If users have to find out all the problems by trial for every
job they run, the grid will not be usable.<b style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned: </b>Need
to either wrap the differences in middleware and/or help users to determine and
select suitable resources for their jobs.<b style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation
Considerations: </b>About matching jobs with resources, one thought is for us to
learn from running many common applications, define common resource
requirements which will allow most common applications to run. <b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal>Another thought is to provide users with a set of criteria;
allow them to specify their job requirements and to develop a system which can
choose the resources according to users' specifications and submit the jobs for
them.</p>

<p class=MsoNormal>Yet, another thought is that it's impossible to cover all
factors which could affect user jobs. Even if we can provide users with extensive
criteria, users may not have any idea as how some of them can affect their
applications, therefore may not be able to use them effectively. Perhaps a
system can be developed to help hard-case applications to determine the
compatibility thru some trial runs on different types of resources.</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Job submission<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem: </b>Job
submission is different on each system, due to the different job managers,
different batch queue setups, different network and access setups (some hosts
require special ports or password-less SSH for access compute nodes etc.). To
manually setup job submission procedure for each system and each job is
difficult for users.<b style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned: </b>A
production grid needs to provide users an easy interface (web portal) for job
submission and perform the operations for the user behind the scene. <b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation Considerations:
</b>Such system has been implemented by some HPC communities. NPACI is one.<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Information Sharing<o:p></o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem</b>: A Grid
can span many administrative domains. Asynchronous system maintenance, software
upgrade, configuration change, etc. without notification can adversely affect
Grid operation and usability. The lack of documentation can be prohibitive for
new users and administrators.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned</b>:
Need to provide more information to users, to establish procedures for using
Grid and publish Grid documents such as &quot;Grid users' guide&quot; and
&quot;Guidelines to set up and operate a Grid <span class=SpellE>testbed</span>&quot;.
Also need to establish procedures and schedules for system maintenance, setup a
&quot;bulletin board&quot; and/or email notification system where
administrators at each site can announce and receive information.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation Considerations:</b>
Specifically for PRAGMA testbed, we need to immediately draft a rough guideline for member/new sites which includes a checklist of requirements, something like basic softwares, basic firewall-free port range and how-to be a user to run a testbed application on PRAGMA.</p>

<pre><o:p>&nbsp;</o:p></pre>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Resources/Jobs Usages Accounting<o:p></o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'><o:p>&nbsp;</o:p></span></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem</b>: Resource
usage data for our run is not readily available.
Although each system may have its own
resource usage data, it's too much work to gather them from each system or
nodes and tabulate them manually.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned</b>: Need
grid-enabled resource usage accounting, down to per job and per user level and
should be available to administrators and users at all times.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation Considerations:</b>
KISTI will show <span class=GramE>a simple</span> accounting software, and use
it to obtain and display usage statistics for the PRAGMA experiment on <span
class=SpellE>KISTI's</span> machine. KISTI is also working on more elaborate
accounting software for Grid environment, but it will be available later this
year.</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Resources and Jobs Monitoring<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem</b>: For our
experiment, we tried to implement a centralized resource monitoring. But not
all sites are running the same monitoring software and different monitoring
software <span class=GramE>do</span> not work together.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned</b>: A
production grid needs either to standardize on <span class=GramE>a monitor</span>
software or to develop bridge-ware for different monitoring software.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><o:p>&nbsp;</o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem</b>: During
our experiment, for us to know our job status, we have to frequently logon,
check the output file, SSH to each system and do <span class=SpellE>qstat</span>.
This takes a lot of time and work and we still miss all the status changes.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned: </b>Need
grid-enabled job monitoring software which can show all jobs on the grid for
specified user(s). Also, need to provide optional email service to notify users
on job status change.</p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation Consideration:</b>
Monitoring of resources and jobs are very important for both administrators and
users. If we consider <span class=GramE>to launch</span> GOC, we need to think
collaboration with NOC (<st1:place><st1:PlaceName>Network</st1:PlaceName> <st1:PlaceName>Operation</st1:PlaceName>
 <st1:PlaceType>Center</st1:PlaceType></st1:place>) in APAN/<span class=SpellE>TransPAC</span>.<o:p></o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'><span
style='font-size:14.0pt'>Fault Tolerance<o:p></o:p></span></b></p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Problem: </b>Jobs are
not running as long as we would like. Many
problems can cause a job to fail: system, network, software, user etc. It takes
a lot of time and work to investigate the cause and to find solutions if we
have to resort to guesses and trial-and-error. Also due to the diversity of the administrative domains within a grid, cannot expect all systems keep the same maintanence schedule.<b style='mso-bidi-font-weight:
normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Lessons Learned: </b>Need
good error reporting, automatic fault detection and recovery, dynamically add and remove sites for applications, also automatically clean up local and remote sites when application terminates.<b
style='mso-bidi-font-weight:normal'><o:p></o:p></b></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>Implementation Considerations:
</b>Middleware should provide such tools for application programmers, so they
can easily write fault-tolerant grid-enabled applications. For example, <span
class=SpellE>Ninf</span>-G provides some features for fault-tolerance.
We could obtain insights on how such features can be used for implementing robust applications.
We need to share our experience with application developers.</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
